{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"I_got_a_headache_from_the_other_one_so_I_made_another","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"7Kzcv_imjCVi"},"source":["import pandas as pd\n","import numpy as np\n","import csv\n","import matplotlib.pyplot as plt\n","import time\n","import statistics\n","from google.colab import drive"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kKnPvTObjS3E","executionInfo":{"status":"ok","timestamp":1637091580877,"user_tz":300,"elapsed":1320,"user":{"displayName":"Rachel Allgaier","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5CNrJ_mVgM9t_Drwr6hwaOzD5575tLXNNAyFi5Q=s64","userId":"17904673559713387693"}},"outputId":"160447bf-e5da-4e01-a046-b3658db6d53f"},"source":["## BEFORE YOU RUN THE CODE, YOU HAVE TO RUN THIS AND FOLLOW THE DIRECTIONS THAT POP UP\n","drive.mount(\"/content/gdrive\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"cD_3TS-EjjX8"},"source":["battery_capacity = 80000.0\n","degradation_percent = 0.00038\n","max_cycles = 200\n","solar_rr = 2400\n","adjusted_rr = 2400\n","months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n","distribution_dict = {\"January\": [], \"February\": [], \"March\": [], \"April\": [], \"May\": [], \"June\": [], \"July\": [], \"August\": [], \"September\": [], \"October\": [], \"November\": [], \"December\": []}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mQ8JT6iXjw3A"},"source":["def get_data(filename):\n","  df = pd.read_csv(filename)\n","  return df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EoEhydoDjyJw"},"source":["def avg_calc(data):\n","  ## Create an empty dataframe to add to later\n","  averages = pd.DataFrame()\n","\n","  ## Iterate through all of the months\n","  for month in range(1,data['Month'].max() + 1):\n","    print(month)\n","\n","    ## Iterate through all of the days in that month\n","    for day in range(1,data[data['Month'] == month]['Day'].max() + 1):\n","\n","      ## Get the data where the month and the day equals the ones that your iterating through\n","      current_day = data.loc[(data['Month'] == month) & (data['Day'] == day)]\n","      avgs = pd.DataFrame()\n","      \n","      ## Iterate over all of the elements in the currentday dataframe, stopping at hour 21. \n","      for index, row in current_day.iterrows():\n","        if not (row['Hour_Begin'] == 21 or row['Hour_Begin'] == 22 or row['Hour_Begin'] == 23):\n","            hr1 = float(current_day.loc[index + 0, ]['Hourly_Prices'])\n","            hr2 = float(current_day.loc[index + 1, ]['Hourly_Prices'])\n","            hr3 = float(current_day.loc[index + 2, ]['Hourly_Prices'])\n","            hr4 = float(current_day.loc[index + 3, ]['Hourly_Prices'])\n","\n","            ## Get the average of the hourly prices in four hour time windows. Get the max and min of each day along with their corresponding hours\n","            avgs = avgs.append({'hour': current_day.loc[index + 0, ]['Hour_Begin'], 'average_for_next_3_hours':np.mean([hr1,hr2,hr3,hr4])}, ignore_index=True)\n","      averages = averages.append({'year': int(current_day['Year'].iloc[0]), 'month': int(month), 'day': int(day), 'max': avgs['average_for_next_3_hours'].max(), 'min': avgs['average_for_next_3_hours'].min(), 'hour_max':\n","                                    avgs.loc[avgs['average_for_next_3_hours'] == avgs['average_for_next_3_hours'].max(), ['hour']].iloc[0].hour, 'hour_min':\n","                                    avgs.loc[avgs['average_for_next_3_hours'] == avgs['average_for_next_3_hours'].min(), ['hour']].iloc[0].hour},  ignore_index=True)\n","  return averages"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CiEHdyTKj1fE"},"source":["def top_x_calc(x, averages, data, adjusted_capacity):\n","  current_charge = 0\n","  ## Get the top 200 days with the highest max average price and put them in order of month and day\n","  top_x = averages.sort_values(['max'], ascending=False).head(x + 10)\n","  # top210 = averages.sort_values(['max'], ascending=False)\n","  top_x = top_x.sort_values(['month', 'day'])\n","\n","  ## Set adjusted energy to metered load for all rows (updating adjusted energy for the rows with min and max energy below)\n","  data['Adjusted_Energy'] = data['Metered_Load']\n","\n","  ## Iterate through the top200 days dataset\n","  data['is_charging'] = 0\n","  data['is_discharging'] = 0\n","  days = 0\n","\n","  for index, row in top_x.iterrows():\n","    if days < x:\n","      discharge_hours = data.loc[(data['Day'] == row['day']) & (data['Month'] == row['month']) & (data['Year'] == row['year'])].sort_values(['Hourly_Prices'], ascending=False)[0:4]\n","      discharge_hours = discharge_hours.sort_values(['CT_Hour_Begin'], ascending=True)\n","      last_charge_hour = int(discharge_hours.sort_values(['CT_Hour_Begin'], ascending=True).head(1)['Hour_Begin']) - 1\n","      charge_hours = data.loc[(data['Day'] == row['day']) & (data['Month'] == row['month']) & (data['Year'] == row['year']) & (data['Hour_Begin'] <= last_charge_hour)].sort_values(['Hourly_Prices'], ascending=True)[0:4]\n","      charge_hours = charge_hours.sort_values(['CT_Hour_Begin'], ascending=True)\n","      if last_charge_hour >= 3:\n","        for item in list(charge_hours.index): \n","          data.loc[item, 'is_charging'] = 1\n","          data.loc[item, 'Adjusted_Energy'] += ((adjusted_capacity - 8000)/4)/.98\n","        for item in list(discharge_hours.index):\n","          data.loc[item, 'is_discharging'] = 1\n","          data.loc[item, 'Adjusted_Energy'] -= ((adjusted_capacity - 8000)/4)\n","        days += 1  \n","      else:\n","        continue\n","      adjusted_capacity = adjusted_capacity * (1 - degradation_percent)\n","\n","  ## Multiply the new adjusted energy by the hourly prices to get the adjusted hourly cost\n","  data['Adjusted_Hourly_Cost'] = (data['Hourly_Prices'] * data['Adjusted_Energy'])/1000\n","\n","  return data, adjusted_capacity"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OtgunLrNj5OA"},"source":["def top_x_calc_summer_adjusted(x, averages, data, adjusted_capacity):\n","  current_charge = 0\n","  ## Get the top 200 days with the highest max average price and put them in order of month and day\n","  top_x = averages.sort_values(['max'], ascending=False).head(x + 10)\n","  # top210 = averages.sort_values(['max'], ascending=False)\n","  top_x = top_x.sort_values(['month', 'day'])\n","\n","  ## Set adjusted energy to metered load for all rows (updating adjusted energy for the rows with min and max energy below)\n","  data['Adjusted_Energy'] = data['Metered_Load']\n","\n","  ## Iterate through the top200 days dataset\n","  data['is_charging'] = 0\n","  data['is_discharging'] = 0\n","  days = 0\n","  data['planning_capactiy'] = 0\n","  count = 0 \n","  for index, row in top_x.iterrows():\n","    if days < x:\n","      if not (row['month'] == 6 or row['month'] == 7 or row['month'] == 8):\n","        discharge_hours = data.loc[(data['Day'] == row['day']) & (data['Month'] == row['month']) & (data['Year'] == row['year'])].sort_values(['Hourly_Prices'], ascending=False)[0:4]\n","        discharge_hours = discharge_hours.sort_values(['CT_Hour_Begin'], ascending=True)\n","        last_charge_hour = int(discharge_hours.sort_values(['CT_Hour_Begin'], ascending=True).head(1)['Hour_Begin']) - 1\n","        charge_hours = data.loc[(data['Day'] == row['day']) & (data['Month'] == row['month']) & (data['Year'] == row['year']) & (data['Hour_Begin'] <= last_charge_hour)].sort_values(['Hourly_Prices'], ascending=True)[0:4]\n","        charge_hours = charge_hours.sort_values(['CT_Hour_Begin'], ascending=True)\n","        if last_charge_hour >= 3:\n","          for item in list(charge_hours.index): \n","            data.loc[item, 'is_charging'] = 1\n","            data.loc[item, 'Adjusted_Energy'] += ((adjusted_capacity - 8000)/4)/.98\n","          for item in list(discharge_hours.index):\n","            data.loc[item, 'is_discharging'] = 1\n","            data.loc[item, 'Adjusted_Energy'] -= ((adjusted_capacity - 8000)/4)\n","          days += 1  \n","      else:\n","        discharge_hours = data.loc[(data['Day'] == row['day']) & (data['Month'] == row['month']) & (data['Year'] == row['year']) & ((data['Hour_Begin'] == 15) | (data['Hour_Begin'] == 16) | (data['Hour_Begin'] == 17) | (data['Hour_Begin'] == 18))]\n","        discharge_hours = discharge_hours.sort_values(['CT_Hour_Begin'], ascending=True)\n","        last_charge_hour = 14\n","        charge_hours = data.loc[(data['Day'] == row['day']) & (data['Month'] == row['month']) & (data['Year'] == row['year']) & (data['Hour_Begin'] <= last_charge_hour)].sort_values(['Hourly_Prices'], ascending=True)[0:4]\n","        charge_hours = charge_hours.sort_values(['CT_Hour_Begin'], ascending=True)\n","\n","        if last_charge_hour >= 3:\n","          if count < 20:\n","            x = 26000\n","            count += 1\n","          else:\n","            x = 8000\n","          for item in list(charge_hours.index): \n","            data.loc[item, 'is_charging'] = 1\n","            data.loc[item, 'Adjusted_Energy'] += ((adjusted_capacity - x)/4)/.98\n","          for item in list(discharge_hours.index):\n","            if x == 26000:\n","              data.loc[item, 'planning_capacity'] = 1\n","            data.loc[item, 'is_discharging'] = 1\n","            data.loc[item, 'Adjusted_Energy'] -= ((adjusted_capacity - x)/4)\n","          days += 1 \n","      adjusted_capacity = adjusted_capacity * (1 - degradation_percent)\n","\n","  return data, adjusted_capacity"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pbHn8RLej-Dc"},"source":["def get_running_charge(data, degradation_percent, current_battery_capacity):\n","  current_state_charge = 8000\n","  running_sum = 0 \n","  num_cycles = 0 \n","  data['running_state_of_charge'] = 0 \n","  for index, row in data.iterrows():\n","    if row['is_charging'] == 1:\n","      running_sum += 1\n","      current_state_charge += ((current_battery_capacity - 8000)/4)/.98\n","      if current_state_charge > 80000:\n","        data.loc[index, 'Adjusted_Energy'] -= (current_state_charge - 80000)\n","        current_state_charge = 80000\n","      data.loc[index, 'running_state_of_charge'] = round(current_state_charge, 2)\n","    elif row['is_discharging'] == 1:\n","      running_sum += 1\n","      current_state_charge -= ((current_battery_capacity - 8000)/4)/.98\n","      if current_state_charge < 8000:\n","        data.loc[index, 'Adjusted_Energy'] += (8000 - current_state_charge)\n","        current_state_charge = 8000\n","      data.loc[index, 'running_state_of_charge'] = round(current_state_charge, 2)\n","    elif running_sum == 8: \n","      running_sum = 0\n","      num_cycles += 1 \n","      current_battery_capacity = 80000 * (1 - degradation_percent)**num_cycles\n","      #print(current_battery_capacity)\n","    else:\n","      data.loc[index, 'running_state_of_charge'] = round(current_state_charge, 2)\n","    if data.loc[index, 'running_state_of_charge'] == 0:\n","      data.loc[index, 'running_state_of_charge'] = 8000\n","      \n","    ## Multiply the new adjusted energy by the hourly prices to get the adjusted hourly cost\n","  data['Adjusted_Hourly_Cost'] = (data['Hourly_Prices'] * data['Adjusted_Energy'])/1000\n","  return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cy3-sLlCkBKh"},"source":["def original_adjusted(data, original_ss_cost = 0, adjusted_ss_cost = 0):\n","  difference = data[\"Original_Hourly_Cost\"].sum() + original_ss_cost - data[\"Adjusted_Hourly_Cost\"].sum() - adjusted_ss_cost\n","  original_adjusted_dict = {\"Original\": data[\"Original_Hourly_Cost\"].sum() + original_adjusted, \"Adjusted\": data[\"Adjusted_Hourly_Cost\"].sum() + adjusted_ss_cost, \n","                            \"Difference\": difference, \"% Difference\": 100 * (difference / (data[\"Original_Hourly_Cost\"].sum() + original_ss_cost))}\n","\n","  return original_adjusted_dict"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TDmMlTYXdc8L"},"source":["def solar_smoothing (data, year):\n","  data['adjusted_' + str(year)] = 0\n","\n","  bucket = 0 \n","  battery = 0 \n","  cycles = 0\n","\n","  for index, row in data.iterrows():\n","    if row[str(year)] > 0:\n","      bucket += row[str(year)]\n","      battery += row[str(year)]\n","    elif row[str(year)] < 0:\n","      if bucket >= row[str(year)] and bucket != 0:\n","        if row[str(year)] + bucket <= 0:\n","          data.loc[index, 'adjusted_' + str(year)] = row[str(year)] + bucket\n","        bucket += row[str(year)]\n","        battery += min(bucket, np.abs(row[str(year)]))\n","        if bucket < 0 :\n","          bucket = 0\n","      elif bucket < -row[str(year)]:\n","        bucket = 0 \n","        data.loc[index, 'adjusted_' + str(year)] = row[str(year)]\n","    if bucket > 72000:\n","      bucket = 72000\n","    if battery >= 160000:\n","      cycles += 1 \n","      battery -= 160000\n","  return data, cycles, np.sum(data[\"adjusted_\" + str(year)])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IIz7qnTHkLKJ"},"source":["def normal_pr_function_calls (filepath, year, current_battery_capacity, num_cycles_remaining, original_rr, adjusted_rr):\n","  data['running_state_of_charge'] = 0\n","  #creates a column for the original price of energy\n","  data['Original_Hourly_Cost'] = data['Metered_Load'] * data['Hourly_Prices']/1000\n","    \n","  # call the avg_calc function\n","  averages = avg_calc(data)\n","  past_battery_capacity = current_battery_capacity\n","\n","  # call the top_200_calc function\n","  data, current_battery_capacity = top_x_calc_summer_adjusted(num_cycles_remaining, averages, data, current_battery_capacity)\n","  get_running_charge(data, degradation_percent, past_battery_capacity)\n","\n","  original_adjusted_dict = original_adjusted(data, original_rr, adjusted_rr)\n","  print(original_adjusted_dict)\n","\n","  return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"05jRbwwkXY7A"},"source":["planning_reserves = False\n","solar_smoothing = False\n","monthly_smoothed = False\n","years = '2016, 2017, 2018, 2019, 2020'\n","filepath=\"/Users/rachelallgaier/Documents/senior_design/\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a87lgtEnFHeJ","executionInfo":{"status":"ok","timestamp":1637093169800,"user_tz":300,"elapsed":339,"user":{"displayName":"Rachel Allgaier","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh5CNrJ_mVgM9t_Drwr6hwaOzD5575tLXNNAyFi5Q=s64","userId":"17904673559713387693"}},"outputId":"49f18142-3137-4177-9528-e2a0f713229f"},"source":["years = [int(i.strip()) for i in years.split(\",\")]\n","\n","peak_reduction_data = {i: None for i in years} \n","\n","global battery_capacity\n","current_battery_capacity = battery_capacity\n","\n","for year in years:\n","  peak_reduction_data[year] = get_data(filepath + \"yearly_price_csv/\" + str(year) + \"_prices.csv\")\n","\n","peak_reduction = True\n","if monthly_smoothed = True: peak_reduction = False\n","\n","if solar_smoothing: \n","  ss_path = \"yearly_price_csv/solar_smoothing/SolarSmoothingData.csv\"\n","  solar_smoothing_data = get_data(filepath + ss_path)\n","  for year in years:\n","    ss_data, num_cycles_after_ss = solar_smoothing(ss_data, year)\n","    current_battery_capacity = current_battery_capacity * (1 - degradation_percent) ** num_cycles_after_ss"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{2016: None, 2017: None, 2018: None, 2019: None, 2020: None}\n"]}]}]}